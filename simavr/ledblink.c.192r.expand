
;; Function uart_putchar (uart_putchar, funcdef_no=7, decl_uid=2025, cgraph_uid=7, symbol_order=11)

uart_putchar (char c, struct FILE * stream)
{
  unsigned char _6;
  unsigned char _7;
  unsigned char c.0_9;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (c_2(D) == 10)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  uart_putchar (13, stream_4(D));
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       3
;;                2
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       4
;;                5
  _7 ={v} MEM[(volatile uint8_t *)192B];
  _6 = _7 & 32;
  if (_6 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 6, loop depth 0
;;    pred:       5
  c.0_9 = (unsigned char) c_2(D);
  MEM[(volatile uint8_t *)198B] ={v} c.0_9;
  return 0;
;;    succ:       EXIT

}



Partition map 

Partition 2 (c_2(D) - 2 )
Partition 4 (stream_4(D) - 4 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 9 (c.0_9 - 9 )


Partition map 

Partition 0 (c_2(D) - 2 )
Partition 1 (stream_4(D) - 4 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (c_2(D) - 2 )
Partition 1 (stream_4(D) - 4 )

After Coalescing:

Partition map 

Partition 0 (c_2(D) - 2 )
Partition 1 (stream_4(D) - 4 )
Partition 2 (_6 - 6 )
Partition 3 (_7 - 7 )
Partition 4 (c.0_9 - 9 )


Replacing Expressions
_6 replace with --> _6 = _7 & 32;


uart_putchar (char c, struct FILE * stream)
{
  unsigned char _6;
  unsigned char _7;
  unsigned char c.0_9;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (c_2(D) == 10)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  uart_putchar (13, stream_4(D));
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       3
;;                2
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       4
;;                5
  _7 ={v} MEM[(volatile uint8_t *)192B];
  _6 = _7 & 32;
  if (_6 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 6, loop depth 0
;;    pred:       5
  c.0_9 = (unsigned char) c_2(D);
  MEM[(volatile uint8_t *)198B] ={v} c.0_9;
  return 0;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (c_2(D) == 10)

(insn 7 6 8 (set (cc0)
        (compare (reg/v:QI 46 [ c ])
            (const_int 10 [0xa]))) ledblink.c:21 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (cc0)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) ledblink.c:21 -1
     (int_list:REG_BR_PROB 8629 (nil)))

;; Generating RTL for gimple basic block 3

;; uart_putchar (13, stream_4(D));

(insn 10 9 11 (set (reg:HI 22 r22)
        (reg/v/f:HI 47 [ stream ])) ledblink.c:22 -1
     (nil))

(insn 11 10 12 (set (reg:QI 24 r24)
        (const_int 13 [0xd])) ledblink.c:22 -1
     (nil))

(call_insn 12 11 0 (parallel [
            (set (reg:HI 24 r24)
                (call (mem:HI (symbol_ref:HI ("uart_putchar") [flags 0x3]  <function_decl 0x7fce25999af8 uart_putchar>) [0 uart_putchar S2 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
        ]) ledblink.c:22 -1
     (expr_list:REG_CALL_DECL (symbol_ref:HI ("uart_putchar") [flags 0x3]  <function_decl 0x7fce25999af8 uart_putchar>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:QI (use (reg:QI 24 r24))
        (expr_list:HI (use (reg:HI 22 r22))
            (nil))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 13 12 14 2 "" [0 uses])

(note 14 13 0 NOTE_INSN_BASIC_BLOCK)

;; Generating RTL for gimple basic block 5

;; _7 ={v} MEM[(volatile uint8_t *)192B];

(insn 16 15 17 (set (reg/f:HI 48)
        (const_int 192 [0xc0])) ledblink.c:23 -1
     (nil))

(insn 17 16 0 (set (reg:QI 43 [ D.2072 ])
        (mem/v:QI (reg/f:HI 48) [0 MEM[(volatile uint8_t *)192B]+0 S1 A8])) ledblink.c:23 -1
     (nil))

;; if (_6 == 0)

(insn 19 17 20 (set (reg:QI 49 [ D.2072 ])
        (and:QI (reg:QI 43 [ D.2072 ])
            (const_int 32 [0x20]))) ledblink.c:23 -1
     (nil))

(insn 20 19 21 (set (cc0)
        (compare (reg:QI 49 [ D.2072 ])
            (const_int 0 [0]))) ledblink.c:23 -1
     (nil))

(jump_insn 21 20 0 (set (pc)
        (if_then_else (eq (cc0)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) ledblink.c:23 -1
     (int_list:REG_BR_PROB 9100 (nil)))

;; Generating RTL for gimple basic block 6

;; _9 = (unsigned char) c_2(D);

(insn 23 22 0 (set (reg:QI 44 [ D.2072 ])
        (reg/v:QI 46 [ c ])) ledblink.c:24 -1
     (nil))

;; MEM[(volatile uint8_t *)198B] ={v} _9;

(insn 24 23 25 (set (reg/f:HI 50)
        (const_int 198 [0xc6])) ledblink.c:24 -1
     (nil))

(insn 25 24 0 (set (mem/v:QI (reg/f:HI 50) [0 MEM[(volatile uint8_t *)198B]+0 S1 A8])
        (reg:QI 44 [ D.2072 ])) ledblink.c:24 -1
     (nil))

;; return 0;

(insn 26 25 27 (set (reg:HI 45 [ <retval> ])
        (const_int 0 [0])) ledblink.c:25 -1
     (nil))

(jump_insn 27 26 28 (set (pc)
        (label_ref 0)) ledblink.c:25 -1
     (nil))

(barrier 28 27 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 27.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v:QI 46 [ c ])
        (reg:QI 24 r24 [ c ])) ledblink.c:20 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:HI 47 [ stream ])
        (reg:HI 22 r22 [ stream ])) ledblink.c:20 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (cc0)
        (compare (reg/v:QI 46 [ c ])
            (const_int 10 [0xa]))) ledblink.c:21 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (cc0)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) ledblink.c:21 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 13)
;;  succ:       4 [13.7%]  (FALLTHRU)
;;              5 [86.3%] 

;; basic block 4, loop depth 0, count 0, freq 123, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [13.7%]  (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg:HI 22 r22)
        (reg/v/f:HI 47 [ stream ])) ledblink.c:22 -1
     (nil))
(insn 11 10 12 4 (set (reg:QI 24 r24)
        (const_int 13 [0xd])) ledblink.c:22 -1
     (nil))
(call_insn 12 11 13 4 (parallel [
            (set (reg:HI 24 r24)
                (call (mem:HI (symbol_ref:HI ("uart_putchar") [flags 0x3]  <function_decl 0x7fce25999af8 uart_putchar>) [0 uart_putchar S2 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
        ]) ledblink.c:22 -1
     (expr_list:REG_CALL_DECL (symbol_ref:HI ("uart_putchar") [flags 0x3]  <function_decl 0x7fce25999af8 uart_putchar>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:QI (use (reg:QI 24 r24))
        (expr_list:HI (use (reg:HI 22 r22))
            (nil))))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              2 [86.3%] 
(code_label 13 12 14 5 2 "" [1 uses])
(note 14 13 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 1, count 0, freq 10000, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              6 [91.0%]  (DFS_BACK)
(code_label 18 14 15 6 3 "" [1 uses])
(note 15 18 16 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 6 (set (reg/f:HI 48)
        (const_int 192 [0xc0])) ledblink.c:23 -1
     (nil))
(insn 17 16 19 6 (set (reg:QI 43 [ D.2072 ])
        (mem/v:QI (reg/f:HI 48) [0 MEM[(volatile uint8_t *)192B]+0 S1 A8])) ledblink.c:23 -1
     (nil))
(insn 19 17 20 6 (set (reg:QI 49 [ D.2072 ])
        (and:QI (reg:QI 43 [ D.2072 ])
            (const_int 32 [0x20]))) ledblink.c:23 -1
     (nil))
(insn 20 19 21 6 (set (cc0)
        (compare (reg:QI 49 [ D.2072 ])
            (const_int 0 [0]))) ledblink.c:23 -1
     (nil))
(jump_insn 21 20 22 6 (set (pc)
        (if_then_else (eq (cc0)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) ledblink.c:23 -1
     (int_list:REG_BR_PROB 9100 (nil))
 -> 18)
;;  succ:       6 [91.0%]  (DFS_BACK)
;;              7 [9.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 [9.0%]  (FALLTHRU)
(note 22 21 23 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 7 (set (reg:QI 44 [ D.2072 ])
        (reg/v:QI 46 [ c ])) ledblink.c:24 -1
     (nil))
(insn 24 23 25 7 (set (reg/f:HI 50)
        (const_int 198 [0xc6])) ledblink.c:24 -1
     (nil))
(insn 25 24 26 7 (set (mem/v:QI (reg/f:HI 50) [0 MEM[(volatile uint8_t *)198B]+0 S1 A8])
        (reg:QI 44 [ D.2072 ])) ledblink.c:24 -1
     (nil))
(insn 26 25 30 7 (set (reg:HI 45 [ <retval> ])
        (const_int 0 [0])) ledblink.c:25 -1
     (nil))
(insn 30 26 31 7 (set (reg/i:HI 24 r24)
        (reg:HI 45 [ <retval> ])) ledblink.c:26 -1
     (nil))
(insn 31 30 0 7 (use (reg/i:HI 24 r24)) ledblink.c:26 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function main (main, funcdef_no=8, decl_uid=2030, cgraph_uid=8, symbol_order=13) (executed once)

main ()
{
  uint16_t ivtmp_1;
  unsigned char _10;
  int _11;
  int _12;
  unsigned char _14;
  unsigned char _15;
  uint16_t ivtmp_19;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  MEM[(volatile uint8_t *)36B] ={v} 255;
  __iob[1] = &mystdout;
  __builtin_puts (&"Initialized successfully"[0]);
  MEM[(volatile uint8_t *)37B] ={v} 1;
  __builtin_puts (&"defined i successfully"[0]);
;;    succ:       3

;;   basic block 3, loop depth 1
;;    pred:       6
;;                2
  # ivtmp_1 = PHI <ivtmp_19(6), 100(2)>
  _10 ={v} MEM[(volatile uint8_t *)37B];
  _11 = (int) _10;
  _12 = _11 << 1;
  if (_12 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 1
;;    pred:       3
  MEM[(volatile uint8_t *)37B] ={v} 1;
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 1
;;    pred:       3
  _14 ={v} MEM[(volatile uint8_t *)37B];
  _15 = _14 << 1;
  MEM[(volatile uint8_t *)37B] ={v} _15;
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       4
;;                5
  __builtin_avr_delay_cycles (8000000);
  ivtmp_19 = ivtmp_1 + 65535;
  if (ivtmp_19 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 7, loop depth 0
;;    pred:       6
  __asm__ __volatile__("sleep
	");
  return 0;
;;    succ:       EXIT

}



Partition map 

Partition 1 (ivtmp_1 - 1 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 19 (ivtmp_19 - 19 )


Partition map 

Partition 0 (ivtmp_1 - 1 )
Partition 1 (ivtmp_19 - 19 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2) ivtmp_1 <-> ivtmp_19

Partition map 

Partition 0 (ivtmp_1 - 1 )
Partition 1 (ivtmp_19 - 19 )

Coalesce list: (1)ivtmp_1 & (19)ivtmp_19 [map: 0, 1] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (ivtmp_1 - 1 19 )
Partition 1 (_10 - 10 )
Partition 2 (_11 - 11 )
Partition 3 (_12 - 12 )
Partition 4 (_14 - 14 )
Partition 5 (_15 - 15 )


Replacing Expressions
_11 replace with --> _11 = (int) _10;

_12 replace with --> _12 = _11 << 1;


main ()
{
  uint16_t ivtmp_1;
  unsigned char _10;
  int _11;
  int _12;
  unsigned char _14;
  unsigned char _15;
  uint16_t ivtmp_19;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  MEM[(volatile uint8_t *)36B] ={v} 255;
  __iob[1] = &mystdout;
  __builtin_puts (&"Initialized successfully"[0]);
  MEM[(volatile uint8_t *)37B] ={v} 1;
  __builtin_puts (&"defined i successfully"[0]);
;;    succ:       3

;;   basic block 3, loop depth 1
;;    pred:       6
;;                2
  # ivtmp_1 = PHI <ivtmp_19(6), 100(2)>
  _10 ={v} MEM[(volatile uint8_t *)37B];
  _11 = (int) _10;
  _12 = _11 << 1;
  if (_12 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 1
;;    pred:       3
  MEM[(volatile uint8_t *)37B] ={v} 1;
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 1
;;    pred:       3
  _14 ={v} MEM[(volatile uint8_t *)37B];
  _15 = _14 << 1;
  MEM[(volatile uint8_t *)37B] ={v} _15;
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       4
;;                5
  __builtin_avr_delay_cycles (8000000);
  ivtmp_19 = ivtmp_1 + 65535;
  if (ivtmp_19 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 7, loop depth 0
;;    pred:       6
  __asm__ __volatile__("sleep
	");
  return 0;
;;    succ:       EXIT

}


Inserting a value copy on edge BB2->BB3 : PART.0 = 100

;; Generating RTL for gimple basic block 2

;; MEM[(volatile uint8_t *)36B] ={v} 255;

(insn 6 5 7 (set (reg/f:HI 49)
        (const_int 36 [0x24])) ledblink.c:34 -1
     (nil))

(insn 7 6 8 (set (reg:QI 50)
        (const_int -1 [0xffffffffffffffff])) ledblink.c:34 -1
     (nil))

(insn 8 7 0 (set (mem/v:QI (reg/f:HI 49) [0 MEM[(volatile uint8_t *)36B]+0 S1 A8])
        (reg:QI 50)) ledblink.c:34 -1
     (nil))

;; __iob[1] = &mystdout;

(insn 9 8 10 (set (reg/f:HI 51)
        (symbol_ref:HI ("__iob") [flags 0x40]  <var_decl 0x7fce25975360 __iob>)) ledblink.c:36 -1
     (nil))

(insn 10 9 11 (set (reg:HI 52)
        (symbol_ref:HI ("mystdout") [flags 0x2]  <var_decl 0x7fce25975bd0 mystdout>)) ledblink.c:36 -1
     (nil))

(insn 11 10 0 (set (mem/f:HI (plus:HI (reg/f:HI 51)
                (const_int 2 [0x2])) [1 __iob+2 S2 A8])
        (reg:HI 52)) ledblink.c:36 -1
     (nil))

;; __builtin_puts (&"Initialized successfully"[0]);

(insn 12 11 13 (set (reg:HI 24 r24)
        (symbol_ref/f:HI ("*.LC0") [flags 0x2]  <var_decl 0x7fce259bb6c0 *.LC0>)) ledblink.c:37 -1
     (nil))

(call_insn 13 12 0 (parallel [
            (set (reg:HI 24 r24)
                (call (mem:HI (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>) [0 __builtin_puts S2 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
        ]) ledblink.c:37 -1
     (expr_list:REG_CALL_DECL (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>)
        (nil))
    (expr_list:HI (use (reg:HI 24 r24))
        (nil)))

;; MEM[(volatile uint8_t *)37B] ={v} 1;

(insn 14 13 15 (set (reg/f:HI 53)
        (const_int 37 [0x25])) ledblink.c:41 -1
     (nil))

(insn 15 14 16 (set (reg:QI 54)
        (const_int 1 [0x1])) ledblink.c:41 -1
     (nil))

(insn 16 15 0 (set (mem/v:QI (reg/f:HI 53) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])
        (reg:QI 54)) ledblink.c:41 -1
     (nil))

;; __builtin_puts (&"defined i successfully"[0]);

(insn 17 16 18 (set (reg:HI 24 r24)
        (symbol_ref/f:HI ("*.LC1") [flags 0x2]  <var_decl 0x7fce259bb750 *.LC1>)) ledblink.c:42 -1
     (nil))

(call_insn 18 17 0 (parallel [
            (set (reg:HI 24 r24)
                (call (mem:HI (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>) [0 __builtin_puts S2 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
        ]) ledblink.c:42 -1
     (expr_list:REG_CALL_DECL (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>)
        (nil))
    (expr_list:HI (use (reg:HI 24 r24))
        (nil)))

;; Generating RTL for gimple basic block 3

;; _10 ={v} MEM[(volatile uint8_t *)37B];

(insn 20 19 21 (set (reg/f:HI 55)
        (const_int 37 [0x25])) ledblink.c:45 -1
     (nil))

(insn 21 20 0 (set (reg:QI 43 [ D.2082 ])
        (mem/v:QI (reg/f:HI 55) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])) ledblink.c:45 -1
     (nil))

;; if (_12 == 0)

(insn 22 21 23 (set (reg:HI 56 [ D.2083 ])
        (zero_extend:HI (reg:QI 43 [ D.2082 ]))) ledblink.c:45 -1
     (nil))

(insn 23 22 24 (set (reg:HI 57 [ D.2083 ])
        (ashift:HI (reg:HI 56 [ D.2083 ])
            (const_int 1 [0x1]))) ledblink.c:45 -1
     (nil))

(insn 24 23 25 (parallel [
            (set (cc0)
                (compare (reg:HI 57 [ D.2083 ])
                    (const_int 0 [0])))
            (clobber (scratch:QI))
        ]) ledblink.c:45 -1
     (nil))

(jump_insn 25 24 0 (set (pc)
        (if_then_else (ne (cc0)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) ledblink.c:45 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 4

;; MEM[(volatile uint8_t *)37B] ={v} 1;

(insn 27 26 28 (set (reg/f:HI 58)
        (const_int 37 [0x25])) ledblink.c:46 -1
     (nil))

(insn 28 27 29 (set (reg:QI 59)
        (const_int 1 [0x1])) ledblink.c:46 -1
     (nil))

(insn 29 28 0 (set (mem/v:QI (reg/f:HI 58) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])
        (reg:QI 59)) ledblink.c:46 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 32 31 33 8 "" [0 uses])

(note 33 32 0 NOTE_INSN_BASIC_BLOCK)

;; _14 ={v} MEM[(volatile uint8_t *)37B];

(insn 34 33 35 (set (reg/f:HI 60)
        (const_int 37 [0x25])) ledblink.c:48 -1
     (nil))

(insn 35 34 0 (set (reg:QI 46 [ D.2082 ])
        (mem/v:QI (reg/f:HI 60) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])) ledblink.c:48 -1
     (nil))

;; _15 = _14 << 1;

(insn 36 35 0 (set (reg:QI 47 [ D.2082 ])
        (ashift:QI (reg:QI 46 [ D.2082 ])
            (const_int 1 [0x1]))) ledblink.c:48 -1
     (nil))

;; MEM[(volatile uint8_t *)37B] ={v} _15;

(insn 37 36 38 (set (reg/f:HI 61)
        (const_int 37 [0x25])) ledblink.c:48 -1
     (nil))

(insn 38 37 0 (set (mem/v:QI (reg/f:HI 61) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])
        (reg:QI 47 [ D.2082 ])) ledblink.c:48 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 39 38 40 9 "" [0 uses])

(note 40 39 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_avr_delay_cycles (8000000);

(insn 41 40 42 (parallel [
            (unspec_volatile [
                    (const_int 1599999 [0x1869ff])
                    (const_int 3 [0x3])
                ] UNSPECV_DELAY_CYCLES)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
        ]) /usr/lib/avr/include/util/delay.h:187 -1
     (nil))

(insn 42 41 43 (parallel [
            (unspec_volatile [
                    (const_int 2 [0x2])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) /usr/lib/avr/include/util/delay.h:187 -1
     (nil))

(insn 43 42 0 (parallel [
            (unspec_volatile [
                    (const_int 1 [0x1])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) /usr/lib/avr/include/util/delay.h:187 -1
     (nil))

;; _19 = _1 + 65535;

(insn 44 43 0 (parallel [
            (set (reg:HI 42 [ D.2081 ])
                (plus:HI (reg:HI 42 [ D.2081 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (scratch:QI))
        ]) -1
     (nil))

;; if (_19 != 0)

(insn 46 44 47 (parallel [
            (set (cc0)
                (compare (reg:HI 42 [ D.2081 ])
                    (const_int 0 [0])))
            (clobber (scratch:QI))
        ]) ledblink.c:43 -1
     (nil))

(jump_insn 47 46 0 (set (pc)
        (if_then_else (ne (cc0)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) ledblink.c:43 -1
     (int_list:REG_BR_PROB 9899 (nil)))

;; Generating RTL for gimple basic block 7

;; __asm__ __volatile__("sleep
	");

(insn 49 48 0 (asm_operands/v ("sleep
	") ("") 0 []
         []
         [] ledblink.c:54) ledblink.c:54 -1
     (nil))

;; return 0;

(insn 50 49 51 (set (reg:HI 48 [ <retval> ])
        (const_int 0 [0])) <built-in>:0 -1
     (nil))

(jump_insn 51 50 52 (set (pc)
        (label_ref 0)) <built-in>:0 -1
     (nil))

(barrier 52 51 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 51.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 100, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:HI 49)
        (const_int 36 [0x24])) ledblink.c:34 -1
     (nil))
(insn 7 6 8 2 (set (reg:QI 50)
        (const_int -1 [0xffffffffffffffff])) ledblink.c:34 -1
     (nil))
(insn 8 7 9 2 (set (mem/v:QI (reg/f:HI 49) [0 MEM[(volatile uint8_t *)36B]+0 S1 A8])
        (reg:QI 50)) ledblink.c:34 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:HI 51)
        (symbol_ref:HI ("__iob") [flags 0x40]  <var_decl 0x7fce25975360 __iob>)) ledblink.c:36 -1
     (nil))
(insn 10 9 11 2 (set (reg:HI 52)
        (symbol_ref:HI ("mystdout") [flags 0x2]  <var_decl 0x7fce25975bd0 mystdout>)) ledblink.c:36 -1
     (nil))
(insn 11 10 12 2 (set (mem/f:HI (plus:HI (reg/f:HI 51)
                (const_int 2 [0x2])) [1 __iob+2 S2 A8])
        (reg:HI 52)) ledblink.c:36 -1
     (nil))
(insn 12 11 13 2 (set (reg:HI 24 r24)
        (symbol_ref/f:HI ("*.LC0") [flags 0x2]  <var_decl 0x7fce259bb6c0 *.LC0>)) ledblink.c:37 -1
     (nil))
(call_insn 13 12 14 2 (parallel [
            (set (reg:HI 24 r24)
                (call (mem:HI (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>) [0 __builtin_puts S2 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
        ]) ledblink.c:37 -1
     (expr_list:REG_CALL_DECL (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>)
        (nil))
    (expr_list:HI (use (reg:HI 24 r24))
        (nil)))
(insn 14 13 15 2 (set (reg/f:HI 53)
        (const_int 37 [0x25])) ledblink.c:41 -1
     (nil))
(insn 15 14 16 2 (set (reg:QI 54)
        (const_int 1 [0x1])) ledblink.c:41 -1
     (nil))
(insn 16 15 17 2 (set (mem/v:QI (reg/f:HI 53) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])
        (reg:QI 54)) ledblink.c:41 -1
     (nil))
(insn 17 16 18 2 (set (reg:HI 24 r24)
        (symbol_ref/f:HI ("*.LC1") [flags 0x2]  <var_decl 0x7fce259bb750 *.LC1>)) ledblink.c:42 -1
     (nil))
(call_insn 18 17 3 2 (parallel [
            (set (reg:HI 24 r24)
                (call (mem:HI (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>) [0 __builtin_puts S2 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
        ]) ledblink.c:42 -1
     (expr_list:REG_CALL_DECL (symbol_ref:HI ("puts") [flags 0x41]  <function_decl 0x7fce258a71b0 __builtin_puts>)
        (nil))
    (expr_list:HI (use (reg:HI 24 r24))
        (nil)))
(insn 3 18 45 2 (set (reg:HI 42 [ D.2081 ])
        (const_int 100 [0x64])) ledblink.c:42 -1
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)

;; basic block 4, loop depth 1, count 0, freq 9900, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [99.0%]  (DFS_BACK)
;;              2 [100.0%]  (FALLTHRU)
(code_label 45 3 19 4 10 "" [1 uses])
(note 19 45 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:HI 55)
        (const_int 37 [0x25])) ledblink.c:45 -1
     (nil))
(insn 21 20 22 4 (set (reg:QI 43 [ D.2082 ])
        (mem/v:QI (reg/f:HI 55) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])) ledblink.c:45 -1
     (nil))
(insn 22 21 23 4 (set (reg:HI 56 [ D.2083 ])
        (zero_extend:HI (reg:QI 43 [ D.2082 ]))) ledblink.c:45 -1
     (nil))
(insn 23 22 24 4 (set (reg:HI 57 [ D.2083 ])
        (ashift:HI (reg:HI 56 [ D.2083 ])
            (const_int 1 [0x1]))) ledblink.c:45 -1
     (nil))
(insn 24 23 25 4 (parallel [
            (set (cc0)
                (compare (reg:HI 57 [ D.2083 ])
                    (const_int 0 [0])))
            (clobber (scratch:QI))
        ]) ledblink.c:45 -1
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (cc0)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) ledblink.c:45 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 32)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 5, loop depth 1, count 0, freq 4950, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:HI 58)
        (const_int 37 [0x25])) ledblink.c:46 -1
     (nil))
(insn 28 27 29 5 (set (reg:QI 59)
        (const_int 1 [0x1])) ledblink.c:46 -1
     (nil))
(insn 29 28 30 5 (set (mem/v:QI (reg/f:HI 58) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])
        (reg:QI 59)) ledblink.c:46 -1
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (label_ref 39)) -1
     (nil)
 -> 39)
;;  succ:       7 [100.0%] 

(barrier 31 30 32)
;; basic block 6, loop depth 1, count 0, freq 4950, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [50.0%] 
(code_label 32 31 33 6 8 "" [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg/f:HI 60)
        (const_int 37 [0x25])) ledblink.c:48 -1
     (nil))
(insn 35 34 36 6 (set (reg:QI 46 [ D.2082 ])
        (mem/v:QI (reg/f:HI 60) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])) ledblink.c:48 -1
     (nil))
(insn 36 35 37 6 (set (reg:QI 47 [ D.2082 ])
        (ashift:QI (reg:QI 46 [ D.2082 ])
            (const_int 1 [0x1]))) ledblink.c:48 -1
     (nil))
(insn 37 36 38 6 (set (reg/f:HI 61)
        (const_int 37 [0x25])) ledblink.c:48 -1
     (nil))
(insn 38 37 39 6 (set (mem/v:QI (reg/f:HI 61) [0 MEM[(volatile uint8_t *)37B]+0 S1 A8])
        (reg:QI 47 [ D.2082 ])) ledblink.c:48 -1
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 9900, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 [100.0%] 
;;              6 [100.0%]  (FALLTHRU)
(code_label 39 38 40 7 9 "" [1 uses])
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (parallel [
            (unspec_volatile [
                    (const_int 1599999 [0x1869ff])
                    (const_int 3 [0x3])
                ] UNSPECV_DELAY_CYCLES)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
        ]) /usr/lib/avr/include/util/delay.h:187 -1
     (nil))
(insn 42 41 43 7 (parallel [
            (unspec_volatile [
                    (const_int 2 [0x2])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) /usr/lib/avr/include/util/delay.h:187 -1
     (nil))
(insn 43 42 44 7 (parallel [
            (unspec_volatile [
                    (const_int 1 [0x1])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) /usr/lib/avr/include/util/delay.h:187 -1
     (nil))
(insn 44 43 46 7 (parallel [
            (set (reg:HI 42 [ D.2081 ])
                (plus:HI (reg:HI 42 [ D.2081 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (scratch:QI))
        ]) -1
     (nil))
(insn 46 44 47 7 (parallel [
            (set (cc0)
                (compare (reg:HI 42 [ D.2081 ])
                    (const_int 0 [0])))
            (clobber (scratch:QI))
        ]) ledblink.c:43 -1
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (if_then_else (ne (cc0)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) ledblink.c:43 -1
     (int_list:REG_BR_PROB 9899 (nil))
 -> 45)
;;  succ:       4 [99.0%]  (DFS_BACK)
;;              8 [1.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 100, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [1.0%]  (FALLTHRU)
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (asm_operands/v ("sleep
	") ("") 0 []
         []
         [] ledblink.c:54) ledblink.c:54 -1
     (nil))
(insn 50 49 54 8 (set (reg:HI 48 [ <retval> ])
        (const_int 0 [0])) <built-in>:0 -1
     (nil))
(insn 54 50 55 8 (set (reg/i:HI 24 r24)
        (reg:HI 48 [ <retval> ])) ledblink.c:55 -1
     (nil))
(insn 55 54 0 8 (use (reg/i:HI 24 r24)) ledblink.c:55 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

